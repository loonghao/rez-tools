name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: false
        default: '1.0.0'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Pin Rust version for consistency across environments
  RUST_VERSION: "1.87.0"

jobs:
  # Determine if this is a release commit
  check-release:
    name: Check Release
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check if should release
      id: check
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          # Check if this is a merge commit to main
          if git log --oneline -1 | grep -q "Merge pull request"; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=1.0.0" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
        fi

  # Update version and create tag
  version-bump:
    name: Version Bump
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Update version in Cargo.toml
      run: |
        VERSION="${{ needs.check-release.outputs.version }}"
        sed -i "s/^version = .*/version = \"$VERSION\"/" Cargo.toml
        git add Cargo.toml
        git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"

    - name: Create and push tag
      id: tag
      run: |
        VERSION="${{ needs.check-release.outputs.version }}"
        TAG="v$VERSION"
        git tag $TAG
        git push origin $TAG
        echo "tag=$TAG" >> $GITHUB_OUTPUT

  # Build release binaries
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: [check-release, version-bump]
    if: needs.check-release.outputs.should_release == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          # VFX Platform CY2024 compatible release builds
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            artifact_name: rt
            asset_name: rt-linux-x86_64
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            artifact_name: rt.exe
            asset_name: rt-windows-x86_64.exe
          - os: macos-12
            target: x86_64-apple-darwin
            artifact_name: rt
            asset_name: rt-macos-x86_64
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: rt
            asset_name: rt-macos-aarch64

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.version-bump.outputs.tag }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-${{ matrix.target }}-
          ${{ runner.os }}-cargo-release-
          ${{ runner.os }}-cargo-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create archive
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        else
          tar -czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        fi
      shell: bash

    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
        retention-days: 30

  # Create GitHub release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [check-release, version-bump, build-release]
    if: needs.check-release.outputs.should_release == 'true'
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.version-bump.outputs.tag }}
        fetch-depth: 0

    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | grep -v "${{ needs.version-bump.outputs.tag }}" | head -n1)

        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          git log --pretty=format:"* %s (%h)" $PREV_TAG..${{ needs.version-bump.outputs.tag }} >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "" >> release_notes.md
          echo "This is the initial release of rez-tools Rust rewrite." >> release_notes.md
          echo "" >> release_notes.md
          echo "### Features" >> release_notes.md
          echo "* Complete Rust rewrite for improved performance" >> release_notes.md
          echo "* Single binary distribution" >> release_notes.md
          echo "* Cross-platform support (Windows, Linux, macOS)" >> release_notes.md
          echo "* Automatic rez installation and management" >> release_notes.md
          echo "* Enhanced plugin system" >> release_notes.md
        fi

        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "" >> release_notes.md
        echo "Choose the appropriate binary for your platform:" >> release_notes.md
        echo "* **Linux**: rt-linux-x86_64.tar.gz" >> release_notes.md
        echo "* **Windows**: rt-windows-x86_64.exe.zip" >> release_notes.md
        echo "* **macOS (Intel)**: rt-macos-x86_64.tar.gz" >> release_notes.md
        echo "* **macOS (Apple Silicon)**: rt-macos-aarch64.tar.gz" >> release_notes.md

    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts/

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version-bump.outputs.tag }}
        name: "rez-tools ${{ needs.version-bump.outputs.tag }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: release-artifacts/*/*
