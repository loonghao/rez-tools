name: Pull Request CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Pin Rust version for consistency across environments
  RUST_VERSION: "1.87.0"
  # VFX Platform CY2024 compliance
  VFX_PLATFORM_YEAR: "2024"
  PYTHON_VERSION: "3.11.9"

jobs:
  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        components: rustfmt

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-quality-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-quality-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items

  # Comprehensive test suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # VFX Platform CY2024 compatible environments
          - os: ubuntu-20.04  # VFX Platform standard
            rust: stable
            name: "Ubuntu 20.04 LTS (VFX Platform)"
          - os: ubuntu-latest  # Latest Ubuntu for future compatibility
            rust: stable
            name: "Ubuntu Latest"
          - os: windows-2022    # Windows 11 compatible
            rust: stable
            name: "Windows Server 2022"
          - os: macos-12        # macOS 12 (Intel)
            rust: stable
            name: "macOS 12 (Intel)"
          - os: macos-14        # macOS 14 (Apple Silicon)
            rust: stable
            name: "macOS 14 (Apple Silicon)"
          # Test with beta Rust on primary VFX platform
          - os: ubuntu-20.04
            rust: beta
            name: "Ubuntu 20.04 LTS (Beta Rust)"

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust == 'stable' && env.RUST_VERSION || matrix.rust }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-test-
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
          ${{ runner.os }}-cargo-

    - name: Install Python (VFX Platform CY2024 standard)
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv (for integration tests)
      run: pip install uv

    - name: Run unit tests
      run: cargo test --verbose --all-features

    - name: Run integration tests
      run: cargo test --test integration_tests --verbose

    - name: Run doc tests
      run: cargo test --doc --verbose

  # Build artifacts for PR testing
  build:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: [quality, test]
    strategy:
      fail-fast: false
      matrix:
        include:
          # VFX Platform CY2024 compatible builds
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            artifact_name: rt
            asset_name: rt-linux-x86_64
            name: "Linux x86_64 (VFX Platform)"
          - os: windows-2022
            target: x86_64-pc-windows-msvc
            artifact_name: rt.exe
            asset_name: rt-windows-x86_64.exe
            name: "Windows x86_64"
          - os: macos-12
            target: x86_64-apple-darwin
            artifact_name: rt
            asset_name: rt-macos-x86_64
            name: "macOS Intel x86_64"
          - os: macos-14
            target: aarch64-apple-darwin
            artifact_name: rt
            asset_name: rt-macos-aarch64
            name: "macOS Apple Silicon"

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        targets: ${{ matrix.target }}

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.target }}-
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload PR artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        retention-days: 7

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Check that all jobs passed
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [quality, test, build, security]
    if: always()
    steps:
    - name: Check all jobs
      run: |
        if [[ "${{ needs.quality.result }}" != "success" ]]; then
          echo "Quality checks failed"
          exit 1
        fi
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Tests failed"
          exit 1
        fi
        if [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "Build failed"
          exit 1
        fi
        if [[ "${{ needs.security.result }}" != "success" ]]; then
          echo "Security audit failed"
          exit 1
        fi
        echo "All checks passed!"
